{"version":3,"file":"kfs.js","sources":["/Users/ahmad/Documents/Development/kfs_build/kfs-vite/src/libs/MagicPortalES6.js","/Users/ahmad/Documents/Development/kfs_build/kfs-vite/src/WorkerPool.js","/Users/ahmad/Documents/Development/kfs_build/kfs-vite/src/memoryFs.js","/Users/ahmad/Documents/Development/kfs_build/kfs-vite/src/IDBFs.js","/Users/ahmad/Documents/Development/kfs_build/kfs-vite/src/libs/vfsUtils/gitAuth.js","/Users/ahmad/Documents/Development/kfs_build/kfs-vite/src/libs/vfsUtils/VFSUtils.js","/Users/ahmad/Documents/Development/kfs_build/kfs-vite/src/libs/vfsUtils/storageUtils.js","/Users/ahmad/Documents/Development/kfs_build/kfs-vite/src/libs/vfsUtils/supportChecker.js","/Users/ahmad/Documents/Development/kfs_build/kfs-vite/src/vfs.js","/Users/ahmad/Documents/Development/kfs_build/kfs-vite/src/libs/kfsUtils/versioningManager.js","/Users/ahmad/Documents/Development/kfs_build/kfs-vite/src/libs/kfsUtils/mergingManager.js","/Users/ahmad/Documents/Development/kfs_build/kfs-vite/src/kfs.js"],"sourcesContent":["var e=function(e){var t=this;this.rpc_counter=0,this.channel=e,this.foreign=new Map,this.local=new Map,this.calls=new Map,this.queue=[],this.connectionEstablished=!1,this.channel.addEventListener(\"message\",function(e){var n=e.data;if(n&&\"object\"==typeof n)switch(n.type){case\"MP_INIT\":return t.onInit(n);case\"MP_SET\":return t.onSet(n);case\"MP_CALL\":return t.onCall(n);case\"MP_RETURN\":return t.onReturn(n)}}),this.channel.postMessage({type:\"MP_INIT\",id:1,reply:!0})};e.prototype.onInit=function(e){this.connectionEstablished=!0;var t=this.queue;this.queue=[];for(var n=0,o=t;n<o.length;n+=1){this.channel.postMessage(o[n])}e.reply&&this.channel.postMessage({type:\"MP_INIT\",reply:!1})},e.prototype.onSet=function(e){for(var t=this,n={},o=e.object,s=function(){var s=i[r],c=!e.void.includes(s);n[s]=function(){for(var e=[],n=arguments.length;n--;)e[n]=arguments[n];return t.rpc_counter=(t.rpc_counter+1)%Number.MAX_SAFE_INTEGER,new Promise(function(n,r){t.postMessage({type:\"MP_CALL\",object:o,method:s,id:t.rpc_counter,args:e,reply:c}),c?t.calls.set(t.rpc_counter,{resolve:n,reject:r}):n()})}},r=0,i=e.methods;r<i.length;r+=1)s();var c=this.foreign.get(e.object);this.foreign.set(e.object,n),\"function\"==typeof c&&c(n)},e.prototype.onCall=function(e){var t=this,n=this.local.get(e.object);n&&n[e.method].apply(n,e.args).then(function(n){return e.reply&&t.channel.postMessage({type:\"MP_RETURN\",id:e.id,result:n})}).catch(function(n){return t.channel.postMessage({type:\"MP_RETURN\",id:e.id,error:n.message})})},e.prototype.onReturn=function(e){if(this.calls.has(e.id)){var t=this.calls.get(e.id),n=t.resolve,o=t.reject;this.calls.clear(e.id),e.error?o(e.error):n(e.result)}},e.prototype.postMessage=function(e){this.connectionEstablished?this.channel.postMessage(e):this.queue.push(e)},e.prototype.set=function(e,t,n){void 0===n&&(n={}),this.local.set(e,t);var o=Object.entries(t).filter(function(e){return\"function\"==typeof e[1]}).map(function(e){return e[0]});this.postMessage({type:\"MP_SET\",object:e,methods:o,void:n.void||[]})},e.prototype.get=function(e){return new Promise(function(t,n){var o=this;return this.foreign.has(e)?t(this.foreign.get(e)):t(new Promise(function(t,n){return o.foreign.set(e,t)}))}.bind(this))};export default function(t){var n=new e(t);Object.defineProperties(this,{get:{writable:!1,configurable:!1,value:n.get.bind(n)},set:{writable:!1,configurable:!1,value:n.set.bind(n)}})}\n//# sourceMappingURL=MagicPortalES6.js.map","import { Logger } from \"./libs/LoggerES6.js\";\nimport MagicPortal from \"./libs/MagicPortalES6.js\";\nimport { config } from './configES6.js';\nimport GitWorker from './workers/gitWorker.js?worker&inline';\n\nconst logger = new Logger(config.logging.WorkerPool);\n\nfunction consoleDotLog(...parameters) {\n  logger.consoleDotLog('[WorkerPool]', ...parameters);\n}\n\nfunction consoleDotError(...parameters) {\n  logger.consoleDotError('[WorkerPool]', ...parameters);\n}\n\nconsoleDotLog('Loading workerPool.');\n\nclass WorkerPool {\n  constructor(workerClass = null) {\n    this.workers = new Map();\n    this.workerCount = 0;\n    // Allow dependency injection for testing\n    this.WorkerClass = workerClass || (typeof Worker !== 'undefined' ? Worker : null);\n  }\n\n  async getWorker(mountPath, useSW = false) {\n    try {\n      if (!this.WorkerClass) {\n        throw new Error(\"Worker class not available in this environment\");\n      }\n  \n      if (!this.workers.has(mountPath)) {\n        consoleDotLog(`Creating new worker for ${mountPath}`);\n\n        const worker = new GitWorker();\n\n  \n        // Add error handling\n        worker.onerror = (e) => {\n          consoleDotError('Worker error:', e);\n          consoleDotError('Error details:', {\n            filename: e.filename,\n            lineno: e.lineno,\n            colno: e.colno,\n            message: e.message\n          });\n          throw e;\n        };\n  \n        const portal = new MagicPortal(worker);\n        \n        // Add timeout for safety\n        const thread = await Promise.race([\n          portal.get(\"workerThread\"),\n          new Promise((_, reject) => \n            setTimeout(() => reject(new Error('Worker thread timeout')), 5000)\n          )\n        ]);\n        \n        consoleDotLog('Worker thread obtained, waiting for readiness...');\n        await thread.ready();\n        consoleDotLog('Worker is ready');\n  \n        const swSupport = typeof navigator !== 'undefined' && 'serviceWorker' in navigator;\n        await thread.execute('setSWUsage', { supportsServiceWorker: swSupport, useSW });\n  \n        this.workers.set(mountPath, {\n          worker,\n          portal,\n          thread,\n          users: 0\n        });\n        \n        this.workerCount++;\n        consoleDotLog(`Worker for ${mountPath} initialized`);\n      }\n  \n      const entry = this.workers.get(mountPath);\n      entry.users++;\n      return entry;\n    } catch (error) {\n      consoleDotError(`Failed to get worker for ${mountPath}:`, error);\n      throw error;\n    }\n  }\n\n  async releaseWorker(mountPath) {\n    if (this.workers.has(mountPath)) {\n      const entry = this.workers.get(mountPath);\n      entry.users--;\n      \n      if (entry.users <= 0) {\n        entry.worker.terminate();\n        this.workers.delete(mountPath);\n        this.workerCount--;\n        consoleDotLog(`Terminated worker for ${mountPath}`);\n      }\n    }\n  }\n\n  async forceTerminateAll() {\n    for (const [path, {worker}] of this.workers) {\n      worker.terminate();\n      consoleDotLog(`Force terminated worker for ${path}`);\n    }\n    this.workers.clear();\n    this.workerCount = 0;\n  }\n\n  getActiveCount() {\n    return this.workerCount;\n  }\n}\n\n// Singleton instance\nexport const workerPool = new WorkerPool();","import { workerPool } from \"./WorkerPool.js\";\nimport { Logger } from \"./libs/LoggerES6.js\";\nimport { config } from './configES6.js';\n\nconst logger = new Logger(config.logging.memoryFS);\n\nfunction consoleDotLog(...parameters) {\n  logger.consoleDotLog('[ MemoryFS ] ', ...parameters);\n}\n\nfunction consoleDotError(...parameters) {\n  logger.consoleDotError('[ MemoryFS ] ', ...parameters);\n}\n\nconsoleDotLog('memoryFs loaded.');\n\nclass MemoryFS {\n  constructor(fsName, options = {}) {\n    this.fsName = fsName;\n    this.fileDescriptors = new Map();\n    this.fdCounter = 3;\n    this.workerEntry = null;\n    this.workerThread = null;\n    this.useSW = options?.useSW || null;\n    this.versioningStrategy = options?.versioning?.strategy || config.versioning.strategy;\n    this.doImmediateCommit = (this.versioningStrategy === 'immediate') ? true : false;\n    consoleDotLog(`MemoryFS created for ${fsName}`);\n  }\n\n  async initializeWorker() {\n    this.workerEntry = await workerPool.getWorker(this.fsName, this.useSW);\n    this.workerThread = this.workerEntry.thread;\n\n    await this.workerThread.execute('setFs', {\n      fsName: this.fsName,\n      fsType: 'memory',\n    });\n\n    consoleDotLog(`Worker initialized for ${this.fsName}`);\n  }\n\n  async cleanup() {\n    if (this.workerEntry) {\n      await workerPool.releaseWorker(this.fsName);\n      this.workerEntry = null;\n      this.workerThread = null;\n    }\n  }\n\n  async fs_fopen(filename, mode) {\n    if (!this.workerThread) await this.initializeWorker();\n\n    const fd = this.fdCounter++;\n    this.fileDescriptors.set(fd, { path: filename, pos: 0, mode });\n    consoleDotLog(`File descriptor ${fd} created for ${filename}`);\n    return fd;\n  }\n\n  async fs_fclose(fd) {\n    consoleDotLog(`Closing file descriptor: ${fd}`);\n    if (this.fileDescriptors.has(fd)) {\n      this.fileDescriptors.delete(fd);\n      consoleDotLog(`File descriptor ${fd} closed successfully.`);\n      return 0;\n    }\n    consoleDotError(`File descriptor ${fd} not found.`);\n    return -1;\n  }\n\n  async fs_fread(fd, length) {\n    consoleDotLog(`Reading ${length} bytes from file descriptor: ${fd}`);\n    const file = this.fileDescriptors.get(fd);\n    if (!file) {\n      consoleDotError(`File descriptor ${fd} not found.`);\n      return null;\n    }\n\n    try {\n      if (!this.workerThread) await this.initializeWorker();\n      const data = await this.workerThread.execute('readFileDot', { filePath: file.path });\n      consoleDotLog(`Data read from file ${file.path}:`, data);\n      if (data === null) {\n        consoleDotError(`Data is null for file ${file.path}.`);\n        return null;\n      }\n      const chunk = data.slice(file.pos, file.pos + length);\n      file.pos += chunk.length;\n      consoleDotLog(`Read chunk: ${chunk}, new position: ${file.pos}`);\n      return chunk;\n    } catch (error) {\n      consoleDotError(`Error reading file ${file.path}:`, error);\n      return null;\n    }\n  }\n\n  async fs_fwrite(fd, content) {\n    consoleDotLog(`Writing content to file descriptor: ${fd}`);\n    const file = this.fileDescriptors.get(fd);\n    if (!file) {\n      consoleDotError(`File descriptor ${fd} not found.`);\n      return -1;\n    }\n\n    try {\n      if (!this.workerThread) await this.initializeWorker();\n      const currentData = await this.workerThread.execute('readFileDot', { filePath: file.path }).catch(() => (currentData = \"\"));\n      let data = currentData;\n      consoleDotLog(`Current data in file ${file.path}:`, data);\n      if (data === null) data = \"\"; // Ensure data is not null\n      data = data.slice(0, file.pos) + content + data.slice(file.pos + content.length);\n      await this.workerThread.execute('writeFileDot', {\n        filePath: file.path,\n        fileContent: data,\n        doCommit: this.doImmediateCommit,\n      });\n      file.pos += content.length;\n      consoleDotLog(`Content written to file ${file.path}, new position: ${file.pos}`);\n      return content.length;\n    } catch (error) {\n      consoleDotError(`Error writing to file ${file.path}:`, error);\n      return -1;\n    }\n  }\n\n  async fs_fseek(fd, offset, whence) {\n    consoleDotLog(`Seeking in file descriptor: ${fd}, offset: ${offset}, whence: ${whence}`);\n    const file = this.fileDescriptors.get(fd);\n    if (!file) {\n      consoleDotError(`File descriptor ${fd} not found.`);\n      return -1;\n    }\n\n    try {\n      if (!this.workerThread) await this.initializeWorker();\n      const data = await this.workerThread.execute('readFileDot', { filePath: file.path }).catch(() => (data = \"\"));\n      if (whence === \"SEEK_SET\") file.pos = offset;\n      else if (whence === \"SEEK_CUR\") file.pos += offset;\n      else if (whence === \"SEEK_END\") file.pos = data.length + offset;\n\n      file.pos = Math.max(0, Math.min(file.pos, data.length));\n      consoleDotLog(`New position in file ${file.path}: ${file.pos}`);\n      return 0;\n    } catch (error) {\n      consoleDotError(`Error seeking in file ${file.path}:`, error);\n      return -1;\n    }\n  }\n\n  async fs_ftell(fd) {\n    consoleDotLog(`Getting current position for file descriptor: ${fd}`);\n    const file = this.fileDescriptors.get(fd);\n    if (!file) {\n      consoleDotError(`File descriptor ${fd} not found.`);\n      return -1;\n    }\n    consoleDotLog(`Current position in file ${file.path}: ${file.pos}`);\n    return file.pos;\n  }\n\n  async fs_ftruncate(fd, length) {\n    consoleDotLog(`Truncating file descriptor: ${fd} to length: ${length}`);\n    const file = this.fileDescriptors.get(fd);\n    if (!file) {\n      consoleDotError(`File descriptor ${fd} not found.`);\n      return -1;\n    }\n\n    try {\n      if (!this.workerThread) await this.initializeWorker();\n      const currentData = await this.workerThread.execute('readFileDot', { filePath: file.path }).catch(() => (currentData = \"\"));\n      let data = currentData;\n      consoleDotLog(`Current data in file ${file.path}:`, data);\n      data = data.slice(0, length);\n      await this.workerThread.execute('writeFileDot', {\n        filePath: file.path,\n        fileContent: data,\n        doCommit: this.doImmediateCommit\n      });\n      consoleDotLog(`File ${file.path} truncated to length: ${length}`);\n      return 0;\n    } catch (error) {\n      consoleDotError(`Error truncating file ${file.path}:`, error);\n      return -1;\n    }\n  }\n\n  async fs_stat(path) {\n    consoleDotLog(`Getting stats for path: ${path}`);\n    \n    try {\n      if (!this.workerThread) await this.initializeWorker();\n      const stats = '...';\n      \n      if (!stats) {\n        consoleDotError(`Path not found: ${path}`);\n        return null;\n      }\n\n      return {\n        ...stats,\n        isDirectory: async () => {\n          consoleDotLog('path: ', path);\n          const isDirectory = await this.workerThread.execute('isDirectoryDot', { path });\n          return isDirectory.exists ? isDirectory.isDirectory : false;\n        },\n        isFile: async () => {\n          const isDirectory = await this.workerThread.execute('isDirectoryDot', { path });\n          return isDirectory.exists ? !isDirectory.isDirectory : false;\n        },\n      };\n      \n    } catch (error) {\n      consoleDotError(`Error getting stats for path ${path}:`, error);\n      return null;\n    }\n  }\n\n  async fs_fstat(fd) {\n    consoleDotLog(`Getting stats for file descriptor: ${fd}`);\n    const file = this.fileDescriptors.get(fd);\n    if (!file) {\n      consoleDotError(`File descriptor ${fd} not found.`);\n      return null;\n    }\n    return this.fs_stat(file.path);\n  }\n\n  async fs_remove(path) {\n    if (!this.workerThread) await this.initializeWorker();\n    consoleDotLog(`Removing file: ${path}`);\n    try {\n      await this.workerThread.execute('removeFileDot', { \n        filePath: path, \n        doCommit: this.doImmediateCommit \n      });\n      return 0;\n    } catch (error) {\n      consoleDotError(`Error removing file ${path}:`, error);\n      return -1;\n    }\n  }\n\n  async fs_mkdir(path) {\n    if (!this.workerThread) await this.initializeWorker();\n    consoleDotLog(`Creating directory: ${path}`);\n    try {\n      await this.workerThread.execute('mkdirDot', { \n        dirPath: path, \n        doCommit: this.doImmediateCommit \n      });\n      return 0;\n    } catch (error) {\n      consoleDotError(`Error creating directory ${path}:`, error);\n      return -1;\n    }\n  }\n\n  async fs_rmdir(path) {\n    if (!this.workerThread) await this.initializeWorker();\n    consoleDotLog(`Removing directory: ${path}`);\n    try {\n      await this.workerThread.execute('removeDirDot', { \n        dirPath: path, \n        doCommit: this.doImmediateCommit \n      });\n      return 0;\n    } catch (error) {\n      consoleDotError(`Error removing directory ${path}:`, error);\n      return -1;\n    }\n  }\n\n  async fs_rename(oldPath, newPath) {\n    if (!this.workerThread) await this.initializeWorker();\n    consoleDotLog(`Renaming ${oldPath} to ${newPath}`);\n    try {\n      await this.workerThread.execute('rename', { \n        oldPath, \n        newPath \n      });\n      return 0;\n    } catch (error) {\n      consoleDotError(`Error renaming ${oldPath} to ${newPath}:`, error);\n      return -1;\n    }\n  }\n\n  async fs_opendir(path) {\n    if (!this.workerThread) await this.initializeWorker();\n    consoleDotLog(`Opening directory: ${path}`);\n    try {\n      await this.workerThread.execute('opendir', { path });\n      return 0;\n    } catch (error) {\n      consoleDotError(`Error opening directory ${path}:`, error);\n      return -1;\n    }\n  }\n\n  async fs_readdir(path, options = {}) {\n    consoleDotLog(`Reading directory: ${path}`);\n    try {\n      if (!this.workerThread) await this.initializeWorker();\n      \n      const result = await this.workerThread.execute('readDirDot', { path });\n      const dirEntries = result?.entries || [];\n  \n      return options.fullObjects ? dirEntries : dirEntries.map(entry => entry.path);\n    } catch (error) {\n      consoleDotError(`Error reading directory ${path}:`, error);\n      return [];\n    }\n  }\n  \n  async fs_feof(fd) {\n    consoleDotLog(`Checking EOF for file descriptor: ${fd}`);\n    const file = this.fileDescriptors.get(fd);\n    if (!file) {\n      consoleDotError(`File descriptor ${fd} not found.`);\n      return true;\n    }\n\n    try {\n      if (!this.workerThread) await this.initializeWorker();\n      const data = await this.workerThread.execute('readFileDot', { filePath: file.path }).catch(() => ( data = \"\" ));\n      consoleDotLog(`Current data in file ${file.path}:`, data);\n      const eof = file.pos >= data.length;\n      consoleDotLog(`EOF status for file ${file.path}: ${eof}`);\n      return eof;\n    } catch (error) {\n      consoleDotError(`Error checking EOF for file ${file.path}:`, error);\n      return true;\n    }\n  }\n\n  async fs_fflush(fd) {\n    consoleDotLog(`Flushing file descriptor: ${fd}`);\n    return 0; // No need to flush memory FS\n  }\n\n  async fs_fcloseall() {\n    consoleDotLog(\"Closing all file descriptors.\");\n    this.fileDescriptors = null;\n    this.fs = null;\n    this.workerThread = null;\n    consoleDotLog(\"Closed all file descriptors\", this.fileDescriptors, this.fs, this.workerThread);\n    return 0;\n  }\n}\n\nexport { MemoryFS };","import { Logger } from \"./libs/LoggerES6.js\";\nimport { workerPool } from \"./WorkerPool.js\";\nimport { config } from './configES6.js';\n\nconst logger = new Logger(config.logging.IDBFs);\n\nfunction consoleDotLog(...parameters) {\n  logger.consoleDotLog(...parameters);\n}\n\nfunction consoleDotError(...parameters) {\n  logger.consoleDotError(...parameters);\n}\n\nclass IDBFs {\n  constructor(fsName, options = {}) {\n    this.fs = new LightningFS(fsName, options);\n    this.fileDescriptors = new Map();\n    this.fdCounter = 3;\n    this.workerEntry = null;\n    this.workerThread = null;    \n    this.fsName = fsName;\n    this.useSW = options?.useSW || null;\n    this.versioningStrategy = options?.versioning?.strategy || config.versioning.strategy;\n    this.doImmediateCommit = (this.versioningStrategy === 'immediate') ? true : false;\n\n    // Initialize worker asynchronously\n    (async () => {\n      await this.initializeWorker();\n    })();\n    \n    consoleDotLog(\"IDBFS initialized with LightningFS.\");\n  }\n\n  async initializeWorker() {\n    this.workerEntry = await workerPool.getWorker(this.fsName, this.useSW);\n    this.workerThread = this.workerEntry.thread;\n    \n    await this.workerThread.execute('setFs', {\n      fsName: this.fsName,\n      fsType: 'idb',\n      gitDir: '/'\n    });\n    \n    consoleDotLog(`Worker initialized for ${this.fsName}`);\n  }\n\n  async cleanup() {\n    if (this.workerEntry) {\n      await workerPool.releaseWorker(this.fsName);\n      this.workerEntry = null;\n      this.workerThread = null;\n    }\n  }\n\n  async fs_fopen(filename, mode) {\n    if (!this.workerThread) await this.initializeWorker();\n    consoleDotLog(`Opening file: ${filename} with mode: ${mode}`);\n    const fd = this.fdCounter++;\n    this.fileDescriptors.set(fd, { path: filename, pos: 0, mode });\n    consoleDotLog(`File descriptor ${fd} created for file: ${filename}`);\n    return fd;\n  }\n\n  async fs_fclose(fd) {\n    consoleDotLog(`Closing file descriptor: ${fd}`);\n    if (this.fileDescriptors.has(fd)) {\n      this.fileDescriptors.delete(fd);\n      consoleDotLog(`File descriptor ${fd} closed successfully.`);\n      return 0;\n    }\n    consoleDotError(`File descriptor ${fd} not found.`);\n    return -1;\n  }\n\n  async fs_fread(fd, length) {\n    consoleDotLog(`Reading ${length} bytes from file descriptor: ${fd}`);\n    const file = this.fileDescriptors.get(fd);\n    if (!file) {\n      consoleDotError(`File descriptor ${fd} not found.`);\n      return null;\n    }\n\n    try {\n      if (!this.workerThread) await this.initializeWorker();\n      const data = await this.workerThread.execute('readFileDot', { filePath: file.path });\n      consoleDotLog(`Data read from file ${file.path}:`, data);\n      if (data === null) {\n        consoleDotError(`Data is null for file ${file.path}.`);\n        return null;\n      }\n      const chunk = data.slice(file.pos, file.pos + length);\n      file.pos += chunk.length;\n      consoleDotLog(`Read chunk: ${chunk}, new position: ${file.pos}`);\n      return chunk;\n    } catch (error) {\n      consoleDotError(`Error reading file ${file.path}:`, error);\n      return null;\n    }\n  }\n\n  async fs_fwrite(fd, content) {\n    consoleDotLog(`Writing content to file descriptor: ${fd}`);\n    const file = this.fileDescriptors.get(fd);\n    if (!file) {\n      consoleDotError(`File descriptor ${fd} not found.`);\n      return -1;\n    }\n\n    try {\n      if (!this.workerThread) await this.initializeWorker();\n      const currentData = await this.workerThread.execute('readFileDot', { filePath: file.path }).catch(() => \"\");\n      let data = currentData;\n      consoleDotLog(`Current data in file ${file.path}:`, data);\n      if (data === null) data = \"\"; // Ensure data is not null\n      data = data.slice(0, file.pos) + content + data.slice(file.pos + content.length);\n      await this.workerThread.execute('writeFileDot', {\n        filePath: file.path,\n        fileContent: data,\n        doCommit: this.doImmediateCommit\n      });\n      file.pos += content.length;\n      consoleDotLog(`Content written to file ${file.path}, new position: ${file.pos}`);\n      return content.length;\n    } catch (error) {\n      consoleDotError(`Error writing to file ${file.path}:`, error);\n      return -1;\n    }\n  }\n\n  async fs_fseek(fd, offset, whence) {\n    consoleDotLog(`Seeking in file descriptor: ${fd}, offset: ${offset}, whence: ${whence}`);\n    const file = this.fileDescriptors.get(fd);\n    if (!file) {\n      consoleDotError(`File descriptor ${fd} not found.`);\n      return -1;\n    }\n\n    try {\n      if (!this.workerThread) await this.initializeWorker();\n      const data = await this.workerThread.execute('readFileDot', { filePath: file.path }).catch(() => \"\");\n      if (whence === \"SEEK_SET\") file.pos = offset;\n      else if (whence === \"SEEK_CUR\") file.pos += offset;\n      else if (whence === \"SEEK_END\") file.pos = data.length + offset;\n\n      file.pos = Math.max(0, Math.min(file.pos, data.length));\n      consoleDotLog(`New position in file ${file.path}: ${file.pos}`);\n      return 0;\n    } catch (error) {\n      consoleDotError(`Error seeking in file ${file.path}:`, error);\n      return -1;\n    }\n  }\n\n  async fs_ftell(fd) {\n    consoleDotLog(`Getting current position for file descriptor: ${fd}`);\n    const file = this.fileDescriptors.get(fd);\n    if (!file) {\n      consoleDotError(`File descriptor ${fd} not found.`);\n      return -1;\n    }\n    consoleDotLog(`Current position in file ${file.path}: ${file.pos}`);\n    return file.pos;\n  }\n\n  async fs_ftruncate(fd, length) {\n    consoleDotLog(`Truncating file descriptor: ${fd} to length: ${length}`);\n    const file = this.fileDescriptors.get(fd);\n    if (!file) {\n      consoleDotError(`File descriptor ${fd} not found.`);\n      return -1;\n    }\n\n    try {\n      if (!this.workerThread) await this.initializeWorker();\n      const currentData = await this.workerThread.execute('readFileDot', { filePath: file.path }).catch(() => \"\");\n      let data = currentData;\n      consoleDotLog(`Current data in file ${file.path}:`, data);\n      data = data.slice(0, length);\n      await this.workerThread.execute('writeFileDot', {\n        filePath: file.path,\n        fileContent: data,\n        doCommit: this.doImmediateCommit\n      });\n      consoleDotLog(`File ${file.path} truncated to length: ${length}`);\n      return 0;\n    } catch (error) {\n      consoleDotError(`Error truncating file ${file.path}:`, error);\n      return -1;\n    }\n  }\n\n  async fs_stat(path) {\n    consoleDotLog(`Getting stats for path: ${path}`);\n    \n    try {\n      if (!this.workerThread) await this.initializeWorker();\n      const stats = '...'; // Placeholder for actual stats implementation\n      \n      if (!stats) {\n        consoleDotError(`Path not found: ${path}`);\n        return null;\n      }\n\n      return {\n        ...stats,\n        isDirectory: async () => {\n          consoleDotLog('path: ', path);\n          const isDirectory = await this.workerThread.execute('isDirectoryDot', { path });\n          return isDirectory.exists ? isDirectory.isDirectory : false;\n        },\n        isFile: async () => {\n          const isDirectory = await this.workerThread.execute('isDirectoryDot', { path });\n          return isDirectory.exists ? !isDirectory.isDirectory : false;\n        },\n      };\n      \n    } catch (error) {\n      consoleDotError(`Error getting stats for path ${path}:`, error);\n      return null;\n    }\n  }\n\n  async fs_fstat(fd) {\n    consoleDotLog(`Getting stats for file descriptor: ${fd}`);\n    const file = this.fileDescriptors.get(fd);\n    if (!file) {\n      consoleDotError(`File descriptor ${fd} not found.`);\n      return null;\n    }\n    return this.fs_stat(file.path);\n  }\n\n  async fs_remove(path) {\n    if (!this.workerThread) await this.initializeWorker();\n    consoleDotLog(`Removing file: ${path}`);\n    try {\n      await this.workerThread.execute('removeFileDot', { \n        filePath: path,\n        doCommit: this.doImmediateCommit\n      });\n      return 0;\n    } catch (error) {\n      consoleDotError(`Error removing file ${path}:`, error);\n      return -1;\n    }\n  }\n\n  async fs_mkdir(path) {\n    if (!this.workerThread) await this.initializeWorker();\n    consoleDotLog(`Creating directory: ${path}`);\n    try {\n      await this.workerThread.execute('mkdirDot', { \n        dirPath: path,\n        doCommit: this.doImmediateCommit\n      });\n      return 0;\n    } catch (error) {\n      consoleDotError(`Error creating directory ${path}:`, error);\n      return -1;\n    }\n  }\n\n  async fs_rmdir(path) {\n    if (!this.workerThread) await this.initializeWorker();\n    consoleDotLog(`Removing directory: ${path}`);\n    try {\n      await this.workerThread.execute('removeDirDot', { \n        dirPath: path,\n        doCommit: this.doImmediateCommit\n      });\n      return 0;\n    } catch (error) {\n      consoleDotError(`Error removing directory ${path}:`, error);\n      return -1;\n    }\n  }\n\n  async fs_rename(oldPath, newPath) {\n    if (!this.workerThread) await this.initializeWorker();\n    consoleDotLog(`Renaming ${oldPath} to ${newPath}`);\n    try {\n      await this.workerThread.execute('rename', { \n        oldPath,\n        newPath\n      });\n      return 0;\n    } catch (error) {\n      consoleDotError(`Error renaming ${oldPath} to ${newPath}:`, error);\n      return -1;\n    }\n  }\n\n  async fs_opendir(path) {\n    if (!this.workerThread) await this.initializeWorker();\n    consoleDotLog(`Opening directory: ${path}`);\n    try {\n      await this.workerThread.execute('opendir', { path });\n      return 0;\n    } catch (error) {\n      consoleDotError(`Error opening directory ${path}:`, error);\n      return -1;\n    }\n  }\n\n  async fs_readdir(path, options = {}) {\n    consoleDotLog(`Reading directory: ${path}`);\n    try {\n      if (!this.workerThread) await this.initializeWorker();\n      \n      const dirEntries = await this.workerThread.execute('readDirDot', { path });\n  \n      return options.fullObjects ? dirEntries : dirEntries.map(entry => entry.path);\n    } catch (error) {\n      consoleDotError(`Error reading directory ${path}:`, error);\n      return [];\n    }\n  }  \n\n  async fs_feof(fd) {\n    consoleDotLog(`Checking EOF for file descriptor: ${fd}`);\n    const file = this.fileDescriptors.get(fd);\n    if (!file) {\n      consoleDotError(`File descriptor ${fd} not found.`);\n      return true;\n    }\n\n    try {\n      if (!this.workerThread) await this.initializeWorker();\n      const data = await this.workerThread.execute('readFileDot', { filePath: file.path }).catch(() => \"\");\n      consoleDotLog(`Current data in file ${file.path}:`, data);\n      const eof = file.pos >= data.length;\n      consoleDotLog(`EOF status for file ${file.path}: ${eof}`);\n      return eof;\n    } catch (error) {\n      consoleDotError(`Error checking EOF for file ${file.path}:`, error);\n      return true;\n    }\n  }\n\n  async fs_fflush(fd) {\n    consoleDotLog(`Flushing file descriptor: ${fd}`);\n    return 0;\n  }\n\n  async fs_fcloseall() {\n    consoleDotLog(\"Closing all file descriptors.\");\n    this.fileDescriptors.clear();\n    return 0;\n  }\n}\n\nexport { IDBFs };","// GitAuth.js\nimport { Logger } from \"../LoggerES6.js\";\nimport { config } from '../../configES6.js';\n\nconst logger = new Logger(config.logging.GitAuth);\n\nfunction consoleDotLog(...parameters) {\n  logger.consoleDotLog(...parameters);\n}\n\nfunction consoleDotError(...parameters) {\n  logger.consoleDotError(...parameters);\n}\n\nexport class GitAuth {\n  constructor(workerThread) {\n    this.workerThread = workerThread;\n    this.AuthChecked = false;\n  }\n\n  /**\n   * Sets authentication credentials for Git operations\n   * @param {string} username \n   * @param {string} password \n   * @returns {Promise<boolean>}\n   */\n  async setAuthParams(username, password) {\n    try {\n      if (!this.workerThread) {\n        throw new Error('Worker thread not initialized');\n      }\n      \n      await this.workerThread.execute('setAuthParams', { username, password });\n      consoleDotLog('Auth params set successfully');\n      if (!this.AuthChecked) {\n        // await this.verifyAuth();\n        this.AuthChecked = true;\n      }\n      consoleDotLog('Auth params verified successfully');\n      return true;\n    } catch (error) {\n      consoleDotError('Failed to set auth params:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Verifies if current auth credentials are valid\n   * @returns {Promise<boolean>}\n   */\n  async verifyAuth() {\n    try {\n      if (!this.workerThread) {\n        throw new Error('Worker thread not initialized');\n      }\n\n      // Try a lightweight operation that requires auth\n      // It is not permanent, because a repo can require no auth for clone\n      await this.workerThread.execute('listServerRefs');\n      consoleDotLog('Auth verification successful');\n      return true;\n    } catch (error) {\n      if (error.toString().includes('401') || error.toString().includes('403')) {\n        consoleDotLog('Auth verification failed - invalid credentials');\n        return false;\n      }\n      consoleDotError('Auth verification error:', error);\n      throw error;\n    }\n  }\n\n    /**\n     * Sets Git user config (name and email)\n     * @param {string} name \n     * @param {string} email \n     */\n    async setUserConfig(name, email) {\n        try {\n        await this.workerThread.execute('setConfigs', { name, email });\n        consoleDotLog(`User config set, name: ${name}, email: ${email}`);\n        return true;\n        } catch (error) {\n        consoleDotError(`Failed to set user config: ${error}`);\n        throw error;\n        }\n    }\n}","import { Logger } from \"../LoggerES6.js\";\nimport { workerPool } from '../../WorkerPool.js';\nimport { config } from '../../configES6.js';\nimport { GitAuth } from './gitAuth.js';\n\nconst logger = new Logger(config.logging.VFSutils);\n\nfunction consoleDotLog(...parameters) {\n  logger.consoleDotLog('[ VFSUtils ]' , ...parameters);\n}\n\nfunction consoleDotError(...parameters) {\n  logger.consoleDotError('[ VFSUtils ]' , ...parameters);\n}\n\nconsoleDotLog(\"Loading VFSUtils module\");\n\nexport class VFSutils {\n  constructor(fsType, fsInstance, fsName, fetchInfo, useSW = false) {\n    this.fsType = fsType;\n    this.fsInstance = fsInstance;\n    this.fsName = fsName;\n    this.fetchInfo = fetchInfo;\n    this.workerEntry = null;\n    this.workerThread = null;\n    this.inodeCounter = 12341;\n    this.fsTable = {};\n    this.initialized = false;\n    this.useSW = useSW;\n    this.auth = null;\n  }\n\n  async initialize() {\n    if (this.initialized) return;\n    \n    try {\n      this.workerEntry = await workerPool.getWorker(this.fsName, this.useSW);\n      this.workerThread = this.workerEntry.thread;\n      \n      consoleDotLog('Setting Fs for VFSUtils.')\n      await this.workerThread.execute('setFs', {\n        fsName: this.fsName,\n        fsType: this.fsType,\n      });\n      \n      \n      consoleDotLog('Fs set.')\n      if (this.fetchInfo.corsProxy) {\n        await this.workerThread.execute('setCorsProxy', {\n          corsProxy: this.fetchInfo.corsProxy,\n        });\n      }\n      consoleDotLog('workerThread:', this.workerThread);\n      this.auth = new GitAuth(this.workerThread);\n\n      if (this.fetchInfo.username && this.fetchInfo.password) {\n        await this.setAuthParams(this.fetchInfo.username, this.fetchInfo.password);\n      }\n\n      this.initialized = true;\n      consoleDotLog(`VFSutils initialized for ${this.fsName} with type ${this.fsType}`);\n    } catch (error) {\n      await this.terminate();\n      throw error;\n    }\n  }\n\n  async terminate() {\n    try {\n      if (this.workerEntry) {\n        await workerPool.releaseWorker(this.fsName);\n        this.workerEntry = null;\n        this.workerThread = null;\n      }\n      this.initialized = false;\n      return true;\n    } catch (error) {\n      consoleDotError(\"VFSutils termination error:\", error);\n      return false;\n    }\n  }\n\n  async fetchFromGit() {\n    try {\n      consoleDotLog('Fetching from Git repository...');\n      if (!this.initialized) await this.initialize();\n      consoleDotLog('initialized.')\n      const { url, dir = '/' } = this.fetchInfo;\n      \n      consoleDotLog(`Cloning repository from ${url} to ${dir}`);\n      await this.workerThread.execute('doCloneAndStuff', { url });\n\n      if (this.fetchInfo.name && this.fetchInfo.email) {\n        await this.setUserConfig(this.fetchInfo.name, this.fetchInfo.email);\n      }\n\n      // Generate FS table after successful clone\n      await this.generateFsTable();\n      consoleDotLog('Repository successfully cloned and indexed');\n    } catch (error) {\n      consoleDotError(`Git fetch failed: ${error}`);\n      await this.terminate();\n      throw error;\n    }\n  }\n\n  async fetchFromDisk() {\n    try {\n      if (!this.initialized) await this.initialize();\n      const { dir } = this.fetchInfo;\n      consoleDotLog(`Loading filesystem from disk at ${dir}`);\n      \n      // Implement disk loading logic here\n      await this.generateFsTable();\n      consoleDotLog(`Successfully loaded filesystem from disk`);\n    } catch (error) {\n      consoleDotError(`Disk load failed: ${error.message}`);\n      await this.terminate();\n      throw error;\n    }\n  }\n\n  async fetchFromGoogleDrive() {\n    try {\n      if (!this.initialized) await this.initialize();\n      const { fileId } = this.fetchInfo;\n      consoleDotLog(`Fetching from Google Drive file ${fileId}`);\n      \n      // Implement Google Drive loading logic here\n      await this.generateFsTable();\n      consoleDotLog(`Successfully fetched from Google Drive`);\n    } catch (error) {\n      consoleDotError(`Google Drive fetch failed: ${error.message}`);\n      await this.terminate();\n      throw error;\n    }\n  }\n\n  /* FS Table Management */\n  async generateFsTable() {\n    try {\n      if (!this.initialized) await this.initialize();\n      \n      consoleDotLog('Generating FS table...');\n      const fileList = await this.workerThread.execute('listFilesDot', { listDirs: true });\n      consoleDotLog('File list:', fileList);\n      this.fsTable = this.buildHierarchicalFsTable(fileList);\n      \n      consoleDotLog('FS table generated with', \n        Object.keys(this.fsTable['/'].children).length, 'root entries');\n      return this.fsTable;\n    } catch (error) {\n      consoleDotError('FS table generation failed:', error);\n      throw error;\n    }\n  }\n\n  buildHierarchicalFsTable(fileList) {\n    const root = this.createRootEntry();\n    consoleDotLog('Root entry:', fileList);\n    fileList.forEach(entry => {\n      const pathParts = entry.path.split('/').filter(p => p !== '');\n      let current = root;\n      \n      pathParts.forEach((part, index) => {\n        const isLast = index === pathParts.length - 1;\n        \n        if (!current.children[part]) {\n          current.children[part] = this.createFsTableEntry(\n            part,\n            isLast && entry.type !== 'tree' ? 'file' : 'directory',\n            entry.size || 0,\n            current.dentry_id\n          );\n        }\n        \n        if (!isLast || entry.type === 'tree') {\n          current = current.children[part];\n        }\n      });\n    });\n    \n    return { \"/\": root };\n  }\n\n  async updateFsTable(action, path, type = \"file\", size = 0) {\n    try {\n        // Normalize the path (remove leading/trailing slashes)\n        const normalizedPath = path.replace(/^\\/+|\\/+$/g, '');\n        \n        // Ensure root exists\n        if (!this.fsTable['/']) {\n            this.fsTable['/'] = this.createRootEntry();\n        }\n\n        const pathParts = normalizedPath.split('/');\n        let current = this.fsTable['/'];\n\n        // Special case: removing root (should never happen)\n        if (action === 'remove' && pathParts.length === 0) {\n            throw new Error('Cannot remove root directory');\n        }\n\n        // Traverse the path\n        for (let i = 0; i < pathParts.length - 1; i++) {\n            const part = pathParts[i];\n            \n            if (!current.children || !current.children[part]) {\n                if (action === 'remove') {\n                    // For removal, parent must exist\n                    throw new Error(`Parent path not found: ${pathParts.slice(0, i+1).join('/')}`);\n                }\n                // For creation, create intermediate directories\n                current.children[part] = this.createFsTableEntry(\n                    part, \n                    'directory', \n                    0, \n                    current.dentry_id\n                );\n            }\n            \n            current = current.children[part];\n            \n            if (current.type !== 'directory') {\n                throw new Error(`Path component is not a directory: ${pathParts.slice(0, i+1).join('/')}`);\n            }\n        }\n\n        const name = pathParts[pathParts.length - 1];\n\n        switch (action) {\n            case 'create':\n                if (!current.children) {\n                    current.children = {};\n                }\n                \n                // Check if already exists\n                if (current.children[name]) {\n                    throw new Error(`Path already exists: ${path}`);\n                }\n                \n                current.children[name] = this.createFsTableEntry(\n                    name, \n                    type, \n                    size, \n                    current.dentry_id\n                );\n                break;\n                \n            case 'remove':\n                if (!current.children || !current.children[name]) {\n                    // Return false instead of throwing error for non-existent paths\n                    return { success: false, message: `Path not found: ${path}` };\n                }\n                \n                // Check if trying to remove non-empty directory\n                if (current.children[name].type === 'directory' && \n                    Object.keys(current.children[name].children || {}).length > 0) {\n                    throw new Error(`Cannot remove non-empty directory: ${path}`);\n                }\n                \n                delete current.children[name];\n                break;\n                \n            default:\n                throw new Error(`Invalid action: ${action}`);\n        }\n\n        return { success: true, fsTable: this.fsTable };\n    } catch (error) {\n        consoleDotError('FS table update failed:', error);\n        throw error;\n    }\n}\n\n  createRootEntry() {\n    return {\n      type: \"directory\",\n      dentry_id: this.inodeCounter++,\n      name: \"\",\n      parent_inode: 0,\n      acl: { owner: \"root\", permissions: \"rwx\", groups: { \"users\": \"r\" } },\n      children: {},\n      ctime: Date.now(),\n      mtime: Date.now()\n    };\n  }\n\n  createFsTableEntry(name, type, size, parentInode) {\n    const isDir = type === \"directory\";\n    return {\n      inode: this.inodeCounter++,\n      type,\n      name,\n      mode: isDir ? 16877 : 100644,\n      size: isDir ? 0 : size,\n      uid: 1000,\n      gid: 100,\n      parent_inode: parentInode,\n      acl: { \n        owner: \"user\", \n        permissions: isDir ? \"rwx\" : \"rw-\", \n        groups: { users: \"r\" } \n      },\n      children: isDir ? {} : undefined,\n      ctime: Date.now(),\n      mtime: Date.now()\n    };\n  }\n\n  async getFsTableSize(fsTable) {\n    try {\n      return fsTable ? JSON.stringify(fsTable).length : 0;\n    } catch (error) {\n      consoleDotError('Size calculation failed:', error);\n      return 0;\n    }\n  }\n\n  async commitStagedChanges( message ) {\n    try {\n      if (!this.initialized) await this.initialize();\n\n      await this.workerThread.execute('setFs', {\n        fsName: this.fsName,\n        fsType: this.fsType,\n      });\n\n      return await this.workerThread.execute('commitStagedChanges', { message });\n    } catch (error) {\n      consoleDotError('Version commit failed:', error);\n      throw error;\n    } \n  }\n\n  // -------------------\n  //  Merging Methods\n  // -------------------\n\n    /**\n   * High-level sync flow: checks sync status and acts accordingly.\n   * Handles different cases like local changes, remote updates, etc.\n   * @returns {Promise<void>}\n   * @throws {Error} If sync fails or remote branch not found\n   */\n    async autoSyncFlow() {\n      try {\n        const syncStatus = await this.getSyncStatus();\n        consoleDotLog(\"Auto-sync: Sync status:\", syncStatus);\n        switch (syncStatus) {\n          case 'up-to-date':\n            consoleDotLog(\"Auto-sync: Repo is already up to date.\");\n            return;\n          case 'local-ahead':\n            consoleDotLog(\"Auto-sync: Local changes detected, syncing with remote...\");\n            await this.syncWithRemote('local-ahead');\n            break;\n          case 'other-cases':\n            consoleDotLog(\"Auto-sync: Other cases detected, syncing with remote...\");\n            await this.syncWithRemote('other-cases');\n            break;\n          case 'remote-branch-not-found':\n            consoleDotError('No remote branch found, cannot sync.');\n            break;\n          default:\n            consoleDotError('No remote branch found, cannot sync.');\n            break;\n        }\n      } catch (err) {\n        consoleDotError(\"autoSyncFlow() failed:\", err);\n      }\n    }\n\n    /**\n   * Syncs the local repo with the remote by pulling changes.\n   * Abstract logic — assumes `doFetch` does a pull or fetch + merge.\n   */\n    async syncWithRemote(strategy) {\n      try {\n        if (!this.initialized) await this.initialize();\n  \n        const { url } = this.fetchInfo;\n        consoleDotLog(\"Attempting to sync with remote:\", url);\n\n        await this.setAuthParams(this.fetchInfo.username, this.fetchInfo.password);\n        await this.setUserConfig(this.fetchInfo.name, this.fetchInfo.email);\n        switch (strategy) {\n          case 'local-ahead':\n            consoleDotLog(\"Syncing with remote by pushing local changes...\");\n            await this.workerThread.execute('push', { url, ref: 'main' });\n            break;\n          case 'other-cases':\n            \n            break;\n          default:\n            consoleDotLog(\"Could not determine sync strategy, defaulting to pull...\");\n            // const pullResult = await this.workerThread.pull({ url, ref: 'main' });\n            if (!pullResult.success) {\n              throw new Error(`Pull failed: ${pullResult.error}`);\n            }\n            break;\n        }\n\n        // You might want to handle merge logic here later\n        await this.generateFsTable();\n        consoleDotLog(\"Local repo successfully synced with remote.\");\n      } catch (err) {\n        consoleDotError(\"syncWithRemote failed:\", err);\n        throw err;\n      }\n    }\n\n    async getSyncStatus(_url = null, ref = 'main') {\n      try {\n        const url = _url || this.fetchInfo?.url;\n        const localHead = await this.workerThread.execute('getLastLocalCommit', { ref });\n        const getRemoteHead = await this.workerThread.execute('getLatestRemoteCommit', { url, ref });\n        if (!getRemoteHead.success) return 'remote-branch-not-found';\n        const remoteHead = getRemoteHead.commit;\n\n        consoleDotLog('localHead:', localHead, 'remoteHead:', remoteHead);\n        const mergeBase = await this.workerThread.execute('findMergeBase', {\n          oids: [localHead, remoteHead]\n        });\n            \n        const base = mergeBase[0];\n        consoleDotLog(\"Merge base:\", mergeBase);\n    \n        const localHasRemote = base === remoteHead;\n        if (!remoteHead) return 'remote-branch-not-found';\n        if (localHead === remoteHead) return 'up-to-date';\n        return localHasRemote ? 'local-ahead' : 'other-cases';   \n\n      } catch (err) {\n        return `error: ${err.message}`;\n      }\n    }\n    \n      // ------------------------\n      //  Authentication Methods\n      // ------------------------\n\n      /**\n       * Sets authentication credentials\n       * @param {string} username \n       * @param {string} password \n       * @returns {Promise<boolean>}\n       */\n      async setAuthParams(username, password) {\n        return this.auth.setAuthParams(username, password);\n      }\n\n      /**\n       * Sets Git user config (name and email)\n       * @param {string} name\n       * @param {string} email\n       * @returns {Promise<void>}\n       */\n      async setUserConfig(name, email) {\n        return this.auth.setUserConfig(name, email);\n      }\n      \n      /**\n       * Verifies if current auth credentials are valid\n       * @returns {Promise<boolean>}\n       */\n      async verifyAuth() {\n        return this.auth.verifyAuth();\n      }\n\n      async updateFetchInfo(newFetchInfo) {\n        if (!this.initialized) await this.initialize();\n        this.fetchInfo = { ...this.fetchInfo, ...newFetchInfo };\n        consoleDotLog('Fetch info updated:', this.fetchInfo);\n        return this.fetchInfo;\n      }\n}","export class StorageUtils {\n    constructor(dbName = \"VFS_Mounts\") {\n      this.dbName = dbName;\n    }\n  \n    supportsIndexedDB() {\n      return typeof window !== 'undefined' && !!window.indexedDB;\n    }\n  \n    /** IndexedDB Methods **/\n    async getFromIndexedDB(key) {\n      return new Promise((resolve, reject) => {\n        const request = indexedDB.open(this.dbName, 1);\n        request.onerror = () => resolve(null);\n        request.onsuccess = () => {\n          const db = request.result;\n          const transaction = db.transaction(\"mounts\", \"readonly\");\n          const store = transaction.objectStore(\"mounts\");\n          const getRequest = store.get(key);\n  \n          getRequest.onsuccess = () => resolve(getRequest.result || null);\n          getRequest.onerror = () => resolve(null);\n        };\n        request.onupgradeneeded = (event) => {\n          const db = event.target.result;\n          db.createObjectStore(\"mounts\");\n        };\n      });\n    }\n  \n    async storeInIndexedDB(key, data) {\n      return new Promise((resolve, reject) => {\n        const request = indexedDB.open(this.dbName, 1);\n        request.onerror = () => resolve(false);\n        request.onsuccess = () => {\n          const db = request.result;\n          const transaction = db.transaction(\"mounts\", \"readwrite\");\n          const store = transaction.objectStore(\"mounts\");\n          store.put(data, key);\n          transaction.oncomplete = () => resolve(true);\n          transaction.onerror = () => resolve(false);\n        };\n        request.onupgradeneeded = (event) => {\n          const db = event.target.result;\n          db.createObjectStore(\"mounts\");\n        };\n      });\n    }\n  \n    async removeFromIndexedDB(key) {\n      return new Promise((resolve, reject) => {\n        const request = indexedDB.open(this.dbName, 1);\n        request.onerror = () => resolve(false);\n        request.onsuccess = () => {\n          const db = request.result;\n          const transaction = db.transaction(\"mounts\", \"readwrite\");\n          const store = transaction.objectStore(\"mounts\");\n          store.delete(key);\n          transaction.oncomplete = () => resolve(true);\n          transaction.onerror = () => resolve(false);\n        };\n      });\n    }\n  \n    /** LocalStorage Methods **/\n    async getFromLocalStorage(key) {\n      try {\n        const storedData = localStorage.getItem(key);\n        return storedData ? JSON.parse(storedData) : null;\n      } catch (e) {\n        return null;\n      }\n    }\n  \n    async storeInLocalStorage(key, data) {\n      localStorage.setItem(key, JSON.stringify(data));\n    }\n  \n    async removeFromLocalStorage(key) {\n      localStorage.removeItem(key);\n    }\n  \n    /** Unified Storage Methods **/\n    async get(key) {\n      if (this.supportsIndexedDB()) {\n        return this.getFromIndexedDB(key);\n      }\n      return this.getFromLocalStorage(key);\n    }\n  \n    async store(key, data) {\n      if (this.supportsIndexedDB()) {\n        return this.storeInIndexedDB(key, data);\n      }\n      return this.storeInLocalStorage(key, data);\n    }\n  \n    async remove(key) {\n      if (this.supportsIndexedDB()) {\n        return this.removeFromIndexedDB(key);\n      }\n      return this.removeFromLocalStorage(key);\n    }\n  }","import { Logger } from \"./../LoggerES6.js\";\nimport { config } from './../../configES6.js';\n\nconst logger = new Logger(config.logging.supportChecker);\n\nfunction consoleDotLog(...parameters) {\n  logger.consoleDotLog(...parameters);\n}\n\nexport async function checkIndexedDBSupport() {\n  try {\n    if (!window.indexedDB) {\n      consoleDotLog(\"IndexedDB not supported in this browser\");\n      return false;\n    }\n\n    // Test opening a dummy database to verify support\n    return await new Promise((resolve) => {\n      const dbName = \"testIDBSupport\";\n      const request = indexedDB.open(dbName);\n      \n      request.onerror = () => {\n        consoleDotLog(\"IndexedDB not available\");\n        resolve(false);\n      };\n      \n      request.onsuccess = (event) => {\n        const db = event.target.result;\n        db.close();\n        \n        // Delete the test database\n        const deleteRequest = indexedDB.deleteDatabase(dbName);\n        \n        deleteRequest.onerror = () => {\n          consoleDotLog(\"Failed to delete test database\");\n          resolve(true); // Still consider IDB supported\n        };\n        \n        deleteRequest.onsuccess = () => {\n          consoleDotLog(\"IndexedDB test successful\");\n          resolve(true);\n        };\n      };\n\n      request.onblocked = () => {\n        consoleDotLog(\"IndexedDB request blocked\");\n        resolve(false);\n      };\n    });\n  } catch (e) {\n    consoleDotLog(\"IndexedDB test failed:\", e);\n    return false;\n  }\n}\n\nexport const supportChecker = {\n  checkIndexedDBSupport\n};","import { MemoryFS } from './memoryFs.js';\nimport { IDBFs } from './IDBFs.js';\nimport { VFSutils } from \"./libs/vfsUtils/VFSUtils.js\";\nimport { Logger } from \"./libs/LoggerES6.js\";\nimport { StorageUtils } from './libs/vfsUtils/storageUtils.js';\nimport { checkIndexedDBSupport } from './libs/vfsUtils/supportChecker.js';\nimport { config } from './configES6.js';\n\nconst logger = new Logger(config.logging.vfs);\n\n// Logger Utilities\nfunction consoleDotLog(...parameters) {\n  logger.consoleDotLog('[VFS] ', ...parameters);\n}\n\nfunction consoleDotError(...parameters) {\n  logger.consoleDotError('[VFS] ', ...parameters);\n}\n\nexport class VFS {\n  // Initialization and Core Setup\n  constructor(storageName = \"VFS_Mounts\") {\n    consoleDotLog(`Initializing VFS with storage name: ${storageName}`);\n    this.mounts = Object.create(null);\n    this.initializedMounts = new Set();\n    this.VFSutils = null;\n    this.storageUtils = new StorageUtils(storageName);\n    this.currentMountPath = '';\n    consoleDotLog('VFS instance created');\n  }\n\n  // Utility functions for versioning and merging\n  getVersioningConfig(options = {}) {\n    const versioning = options.versioning || config.versioning || {};\n    return {\n      strategy: versioning.strategy,\n      interval: versioning.interval,\n      number: versioning.number\n    };\n  }\n\n  getMergingConfig(options = {}) {\n    const merging = options.merging || config.merging || {};\n    return {\n      strategy: merging.strategy || 'none',\n      conflictResolution: merging.conflictResolution || 'timestamp'\n    };\n  }\n\n  // Storage and Support Checking\n  async checkIndexedDBSupport() {\n    consoleDotLog('Checking IndexedDB support...');\n    try {\n      await checkIndexedDBSupport();\n      consoleDotLog('IndexedDB is supported');\n      return true;\n    } catch (error) {\n      consoleDotError('IndexedDB not supported:', error);\n      return false;\n    }\n  }\n\n  async loadMountFromStorage(mountPath) {\n    consoleDotLog(`Attempting to load mount from storage: ${mountPath}`);\n    try {\n      const storedMount = await this.storageUtils.get(mountPath);\n      if (storedMount) {\n        consoleDotLog(`Successfully loaded mount from storage: ${mountPath}`);\n        return storedMount;\n      }\n      consoleDotLog(`No mount found in storage for path: ${mountPath}`);\n      return null;\n    } catch (error) {\n      consoleDotError(`Failed to load mount from storage (path: ${mountPath}):`, error);\n      throw error;\n    }\n  }\n\n  async persistMountData(mountPath, mountData) {\n    consoleDotLog(`Persisting mount data for ${mountPath}`);\n    try {\n      const dataToStore = { ...mountData };\n      delete dataToStore.fsInstance;\n      await this.storageUtils.store(mountPath, dataToStore);\n      consoleDotLog(`Successfully persisted mount data for ${mountPath}`);\n    } catch (error) {\n      consoleDotError(`Failed to persist mount data for ${mountPath}:`, error);\n      throw error;\n    }\n  }\n\n  // Filesystem Instance Management\n  async createFSInstance(fsType, mountPath, options = {}) {\n    consoleDotLog(`Creating FS instance of type ${fsType} for mount path ${mountPath}`);\n    try {\n      if (fsType === 'idb') {\n        consoleDotLog('Checking IndexedDB support for IDB FS');\n        const isSupported = await this.checkIndexedDBSupport();\n        if (!isSupported) {\n          consoleDotLog(`IndexedDB not supported, falling back to memory FS for ${mountPath}`);\n          fsType = 'memory';\n        }\n      }\n\n      let fsInstance;\n      switch (fsType) {\n        case 'memory':\n          consoleDotLog('Creating MemoryFS instance');\n          fsInstance = new MemoryFS(mountPath, options);\n          break;\n        case 'idb':\n          consoleDotLog('Creating IDBFs instance');\n          fsInstance = new IDBFs(mountPath, options);\n          break;\n        default:\n          const errorMsg = `Unknown FS type: ${fsType}`;\n          consoleDotError(errorMsg);\n          throw new Error(errorMsg);\n      }\n\n      consoleDotLog(`Successfully created ${fsType} FS instance for ${mountPath}`);\n      return fsInstance;\n    } catch (error) {\n      consoleDotError(`Failed to create FS instance (type: ${fsType}, path: ${mountPath}):`, error);\n      throw error;\n    }\n  }\n\n  async ensureFSInitialized(fsPath) {\n    consoleDotLog(`Ensuring FS is initialized for path: ${fsPath}`);\n    if (this.initializedMounts.has(fsPath)) {\n      consoleDotLog(`FS already initialized for path: ${fsPath}`);\n      return true;\n    }\n    \n    const mountData = this.mounts[fsPath];\n    if (!mountData) {\n      const errorMsg = `Mount not found: ${fsPath}`;\n      consoleDotError(errorMsg);\n      throw new Error(errorMsg);\n    }\n    \n    if (!mountData.fsInstance) {\n      consoleDotLog(`Creating new FS instance for mount at ${fsPath}`);\n      const useSW = mountData?.useSW || false;\n      mountData.fsInstance = await this.createFSInstance(\n        mountData.fsType, \n        fsPath, \n        { \n          useSW, \n          versioning: this.getVersioningConfig(mountData),\n          merging: this.getMergingConfig(mountData)\n        }\n      );\n    }\n    \n    consoleDotLog(`Fetching data for mount at ${fsPath}`);\n    await this.fetchFS(\n      mountData.fetchMethod, \n      mountData.fsType, \n      mountData.fsInstance, \n      fsPath, \n      mountData.fetchInfo\n    );\n    \n    this.initializedMounts.add(fsPath);\n    consoleDotLog(`Successfully initialized FS for path: ${fsPath}`);\n    return true;\n  }\n\n  // Mount/Unmount Operations\n  async mount(path, fsType, fsName, fetchMethod, options = {}) {\n    consoleDotLog(`Mounting filesystem - path: ${path}, type: ${fsType}, name: ${fsName}, method: ${fetchMethod}, options: ${JSON.stringify(options)}`);\n    try {\n      const fetchInfo = options.fetchInfo || {};\n      const useSW = options.useSW || false;\n      const versioning = this.getVersioningConfig(options);\n      const merging = this.getMergingConfig(options);\n      \n      const normalizedPath = path.endsWith('/') ? path : `${path}/`;\n      const mountPath = `${normalizedPath}${fsName}`;\n      consoleDotLog(`Normalized mount path: ${mountPath}`);\n      \n      if (this.mounts[mountPath]) {\n        const errorMsg = `Path ${mountPath} is already mounted`;\n        consoleDotError(errorMsg);\n        throw new Error(errorMsg);\n      }\n\n      this.currentMountPath = mountPath;\n      consoleDotLog(`Checking storage for existing mount at ${mountPath}`);\n      const storedMount = await this.loadMountFromStorage(mountPath);\n\n      if (storedMount) {\n        consoleDotLog(`Found stored mount, initializing existing mount at ${mountPath}`);\n        return this.initializeStoredMount(mountPath, storedMount, fetchMethod, fetchInfo, { useSW, versioning, merging });\n      }\n\n      consoleDotLog(`No stored mount found, creating new mount at ${mountPath}`);\n      return this.createNewMount(mountPath, fsType, fsName, fetchMethod, fetchInfo, useSW, versioning, merging);\n    } catch (error) {\n      consoleDotError('Mount operation failed:', error);\n      throw error;\n    }\n  }\n\n  async initializeStoredMount(mountPath, storedMount, fetchMethod, fetchInfo, options) {\n    consoleDotLog(`Initializing stored mount at ${mountPath}`);\n    try {\n      consoleDotLog(`Creating FS instance for stored mount (type: ${storedMount.fsType})`);\n      const fsInstance = await this.createFSInstance(\n        storedMount.fsType,\n        mountPath,\n        { \n          useSW: options.useSW, \n          versioning: this.getVersioningConfig(storedMount),\n          merging: this.getMergingConfig(storedMount)\n        }\n      );\n\n      consoleDotLog(`Fetching data for stored mount using method: ${storedMount.fetchMethod || fetchMethod}`);\n      await this.fetchFS(\n        storedMount.fetchMethod || fetchMethod,\n        storedMount.fsType,\n        fsInstance,\n        mountPath,\n        storedMount.fetchInfo || fetchInfo,\n        options.useSW\n      );\n\n      this.mounts[mountPath] = {\n        ...storedMount,\n        fsInstance,\n        fetchMethod: storedMount.fetchMethod || fetchMethod,\n        fetchInfo: storedMount.fetchInfo || fetchInfo,\n        versioning: this.getVersioningConfig(storedMount),\n        merging: this.getMergingConfig(storedMount),\n        useSW: options.useSW\n      };      \n\n      this.initializedMounts.add(mountPath);\n      consoleDotLog(`Successfully initialized stored mount at ${mountPath}`);\n      return this.mounts[mountPath];\n    } catch (error) {\n      consoleDotError(`Failed to initialize stored mount at ${mountPath}:`, error);\n      throw error;\n    }\n  }\n\n  async createNewMount(mountPath, fsType, fsName, fetchMethod, fetchInfo, useSW = false, versioning = {}, merging = {}) {\n    consoleDotLog(`Creating new mount at ${mountPath}`);\n    try {\n      consoleDotLog(`Creating new FS instance (type: ${fsType})`);\n      const fsInstance = await this.createFSInstance(fsType, mountPath, { useSW, versioning, merging });\n      \n      consoleDotLog(`Fetching data for new mount using method: ${fetchMethod}`);\n      await this.fetchFS(fetchMethod, fsType, fsInstance, mountPath, fetchInfo, useSW);\n\n      consoleDotLog('Generating filesystem table');\n      const fsTable = await this.VFSutils.generateFsTable();\n      const fsSize = await this.VFSutils.getFsTableSize(fsTable);\n      consoleDotLog(`Filesystem table generated, size: ${fsSize}`);\n\n      const mountData = {\n        fsInstance,\n        fsType: fsInstance instanceof MemoryFS ? 'memory' : fsType,\n        fsName,\n        fsTable,\n        fetchMethod,\n        fetchInfo: {\n          ...fetchInfo,\n          time: new Date().toISOString(),\n          size: fsSize\n        },\n        useSW,\n        versioning: this.getVersioningConfig({ versioning }),\n        merging: this.getMergingConfig({ merging })\n      };\n      \n      this.mounts[mountPath] = mountData;\n      consoleDotLog(`Persisting mount data for ${mountPath}`);\n      await this.persistMountData(mountPath, mountData);\n      \n      this.initializedMounts.add(mountPath);\n      consoleDotLog(`Successfully mounted new filesystem at ${mountPath}`);\n      return mountData;\n    } catch (error) {\n      consoleDotError(`Failed to create new mount at ${mountPath}:`, error);\n      throw error;\n    }\n  }\n\n  async unmount(path, fsName) {\n    const fsPath = path + '/' + fsName;\n    consoleDotLog(`Unmounting filesystem at ${fsPath}`);\n    \n    if (!this.mounts[fsPath]) {\n      const errorMsg = `Path ${fsPath} is not mounted`;\n      consoleDotError(errorMsg);\n      throw new Error(errorMsg);\n    }\n  \n    try {\n      if (this.mounts[fsPath].fsInstance) {\n        consoleDotLog(`Closing all files for mount at ${fsPath}`);\n        await this.mounts[fsPath].fsInstance.fs_fcloseall();\n        this.mounts[fsPath].fsInstance = null;\n      }\n  \n      delete this.mounts[fsPath];\n      this.initializedMounts.delete(fsPath);\n  \n      if (Object.keys(this.mounts).length === 0 && this.VFSutils) {\n        consoleDotLog('Terminating VFSutils instance (no more mounts)');\n        await this.VFSutils.terminate();\n        this.VFSutils = null;\n      }\n  \n      consoleDotLog(`Successfully unmounted ${fsPath}`);\n      return true;\n    } catch (error) {\n      consoleDotError(`Error unmounting ${fsPath}:`, error);\n      throw error;\n    }\n  }\n\n  // Filesystem Operations\n  async fetchFS(fetchMethod, fsType, fsInstance, fsName, fetchInfo, useSW = false) {\n    consoleDotLog(`Fetching filesystem data - method: ${fetchMethod}, type: ${fsType}, name: ${fsName}`);\n    try {\n      if (this.VFSutils) {\n        consoleDotLog('Terminating existing VFSutils instance');\n        await this.VFSutils.terminate();\n        this.VFSutils = null;\n      }\n\n      consoleDotLog('Creating new VFSutils instance');\n      this.VFSutils = new VFSutils(fsType, fsInstance, fsName, fetchInfo, useSW);\n      \n      const fetchStrategies = {\n        git: () => this.VFSutils.fetchFromGit(),\n        disk: () => this.VFSutils.fetchFromDisk(),\n        googleDrive: () => this.VFSutils.fetchFromGoogleDrive()\n      };\n\n      const strategy = fetchStrategies[fetchMethod];\n      if (!strategy) {\n        const errorMsg = `Unknown fetch method: ${fetchMethod}`;\n        consoleDotError(errorMsg);\n        throw new Error(errorMsg);\n      }\n\n      consoleDotLog(`Executing fetch strategy for ${fetchMethod}`);\n      await strategy();\n      consoleDotLog(`Successfully fetched data using ${fetchMethod} method`);\n    } catch (error) {\n      consoleDotError(`Fetch operation failed (method: ${fetchMethod}):`, error);\n      if (this.VFSutils) {\n        consoleDotLog('Cleaning up VFSutils after fetch failure');\n        await this.VFSutils.terminate();\n        this.VFSutils = null;\n      }\n      throw error;\n    }\n  }\n\n  async resolveFS(path) {\n    consoleDotLog(`Resolving filesystem for path: ${path}`);\n    try {\n      for (const mountPath in this.mounts) {\n        if (path.startsWith(mountPath)) {\n          consoleDotLog(`Found matching mount at `, mountPath);\n          await this.ensureFSInitialized(mountPath);\n          const relativePath = path.slice(mountPath.length) || \"/\";\n          consoleDotLog(`Resolved path: ${path} to mount: ${mountPath}, relative path: ${relativePath}, this.mounts[mountPath] : `, this.mounts[mountPath]);\n          consoleDotLog('resolveFs returned value: ', \n            {            \n            fs: this.mounts[mountPath],\n            relativePath: relativePath,\n            versioning: this.mounts[mountPath].versioning || config.versioning,\n            merging: this.mounts[mountPath].merging || config.merging\n          })\n\n          return {\n            fs: this.mounts[mountPath],\n            relativePath: relativePath,\n            versioning: this.mounts[mountPath].versioning || config.versioning,\n            merging: this.mounts[mountPath].merging || config.merging\n          };\n        }\n      }\n      const errorMsg = `No filesystem mounted for path: ${path}`;\n      consoleDotError(errorMsg);\n      throw new Error(errorMsg);\n    } catch (error) {\n      consoleDotError(`Failed to resolve filesystem for path ${path}:`, error);\n      throw error;\n    }\n  }\n\n  // Filesystem Table Operations\n  async writeToFsTable(path, type = \"file\", size = 0) {\n    consoleDotLog(`Writing to fsTable - path: ${path}, type: ${type}, size: ${size}`);\n    await this.validateVFSutils();\n    \n    try {\n      consoleDotLog(`Updating fsTable with create operation for ${path}`);\n      const updateResult = await this.VFSutils.updateFsTable(\"create\", path, type, size);\n      consoleDotLog(`Updating mount fsTable with new data`);\n      await this.updateMountFsTable(updateResult.fsTable);\n      consoleDotLog(`Successfully updated fsTable for ${path}`);\n      return updateResult.fsTable;\n    } catch (error) {\n      consoleDotError('Failed to write to fsTable:', error);\n      throw error;\n    }\n  }\n\n  async removeFromFsTable(path) {\n    consoleDotLog(`Removing from fsTable - path: ${path}`);\n    await this.validateVFSutils();\n    \n    try {\n      consoleDotLog(`Updating fsTable with remove operation for ${path}`);\n      const updateResult = await this.VFSutils.updateFsTable(\"remove\", path);\n      consoleDotLog(`Updating mount fsTable with removal data`);\n      await this.updateMountFsTable(updateResult.fsTable);\n      consoleDotLog(`Successfully removed ${path} from fsTable`);\n      return updateResult.fsTable;\n    } catch (error) {\n      consoleDotError('Failed to remove from fsTable:', error);\n      throw error;\n    }\n  }\n\n  async updateMountFsTable(fsTable) {\n    consoleDotLog(`Updating mount fsTable for current mount path`);\n    if (!this.currentMountPath) {\n      const errorMsg = 'No active mount path available';\n      consoleDotError(errorMsg);\n      throw new Error(errorMsg);\n    }\n\n    consoleDotLog(`Loading mount data for ${this.currentMountPath}`);\n    const mountData = await this.storageUtils.get(this.currentMountPath);\n    if (!mountData) {\n      const errorMsg = `Mount data not found for path: ${this.currentMountPath}`;\n      consoleDotError(errorMsg);\n      throw new Error(errorMsg);\n    }\n\n    consoleDotLog(`Updating fsTable in mount data`);\n    mountData.fsTable = fsTable;\n    consoleDotLog(`Storing updated mount data for ${this.currentMountPath}`);\n    await this.storageUtils.store(this.currentMountPath, mountData);\n    consoleDotLog(`Successfully updated mount fsTable`);\n  }\n\n  // Validation Utilities\n  async validateVFSutils() {\n    consoleDotLog('Validating VFSutils instance');\n    if (!this.VFSutils) {\n      const errorMsg = \"VFSutils not initialized\";\n      consoleDotError(errorMsg);\n      throw new Error(errorMsg);\n    }\n    consoleDotLog('VFSutils validation passed');\n  }\n\n  //----------------------\n  // Versioning Operations\n  //----------------------\n\n  async versioner( message ) {\n    consoleDotLog(`Committing version with message: ${message}`);\n    await this.validateVFSutils();\n    \n    try {\n      const commitResult = await this.VFSutils.commitStagedChanges( message );\n      consoleDotLog(`Version committed successfully`);\n      return commitResult;\n    } catch (error) {\n      consoleDotError('Failed to commit version:', error);\n      throw error;\n    }\n  }\n  \n  //--------------------\n  // Merging Operations\n  //--------------------\n\n  async merger() {\n    consoleDotLog('Starting merge operation');\n    await this.validateVFSutils();\n\n    try {\n      const mergeResult = await this.VFSutils.autoSyncFlow();\n      consoleDotLog('Merge operation completed successfully:', mergeResult);\n      return mergeResult;\n    }\n    catch (error) {\n      consoleDotError('Merge operation failed:', error);\n      throw error;\n    }\n  }\n  \n  //-------------------\n  // Some info setters for vfsUtils\n  //-------------------\n\n  async setMergingStrategy(mergingStrategy) {\n    consoleDotLog('Setting merging strategy');\n    let mountData = this.mounts[this.currentMountPath];\n    mountData = {...mountData, merging: mergingStrategy};\n    await this.persistMountData(this.currentMountPath, mountData);\n    consoleDotLog('Merging strategy set successfully:', mergingStrategy);\n    return true;\n  }\n\n  async setVersioingStrategy(versioningStrategy) {\n    consoleDotLog('Setting versioning strategy');\n    let mountData = this.mounts[this.currentMountPath];\n    mountData = {...mountData, versioning: versioningStrategy};\n    await this.persistMountData(mountPath, mountData);\n    consoleDotLog('Versioning strategy set successfully:', versioningStrategy);\n    return true;\n  }\n\n  async setUserConfigs(args) {\n    await this.validateVFSutils();\n    consoleDotLog('Setting user configurations:', args);\n    await this.VFSutils.updateFetchInfo(args);\n    let mountData = this.mounts[this.currentMountPath];\n    mountData = { ...mountData, fetchInfo: { ...mountData.fetchInfo, ...args } };\n    this.persistMountData(this.currentMountPath, mountData);\n    return args;\n  }\n\n}","import { config } from './../../configES6.js';\nimport { Logger } from './../LoggerES6.js';\n\nconst logger = new Logger(config.logging.kfs);\n\nfunction consoleDotLog(...params) {\n  logger.consoleDotLog('[Versioning]', ...params);\n}\n\nfunction consoleDotError(...params) {\n  logger.consoleDotError('[Versioning]', ...params);\n}\n\nexport class VersioningManager {\n  constructor(vfs) {\n    this.vfs = vfs;\n    this.clockIntervalID = null;\n    this.operationQueueCount = 0;\n    this.config = this._getDefaultVersioningConfig();\n  }\n\n  _getDefaultVersioningConfig() {\n    const versioning = config.versioning || {};\n    return {\n      strategy: versioning.strategy,\n      interval: versioning.interval,\n      number: versioning.number,\n    };\n  }\n\n  async _getVersioningConfig(options = {}) {\n    const defaultConfig = this._getDefaultVersioningConfig();\n    const versioning = options.versioning || {};\n    return {\n      strategy: versioning.strategy || defaultConfig.strategy,\n      interval: versioning.interval || defaultConfig.interval,\n      number: versioning.number || defaultConfig.number,\n    };\n  }\n\n  async setup(options = {}) {\n    this.config = await this._getVersioningConfig(options);\n    consoleDotLog('Versioning configuration:', this.config);\n\n    if (this.config.strategy === 'clock') {\n      this._startClockVersioning();\n    } else {\n      this.clearClock();\n    }\n  }\n\n  clearClock() {\n    if (this.clockIntervalID) {\n      clearInterval(this.clockIntervalID);\n      this.clockIntervalID = null;\n    }\n  }\n\n  _startClockVersioning() {\n    this.clearClock();\n    const intervalMs = (this.config.interval || 10) * 1000;\n    consoleDotLog('Starting clock-based versioning with interval:', intervalMs, 'ms');\n\n    this.clockIntervalID = setInterval(async () => {\n      consoleDotLog('Clock-based auto commit triggered');\n      try {\n        await this.vfs.versioner('Clock-based auto commit');\n      } catch (error) {\n        consoleDotError('Error in clock-based versioning:', error);\n      }\n    }, intervalMs);\n  }\n\n  async maybeTriggerVersioning(overrideConfig = null) {\n    const strategyConfig = overrideConfig || this.config;\n    if (strategyConfig.strategy === 'immediate') return;\n\n    if (strategyConfig.strategy === 'batch') {\n      this.operationQueueCount++;\n      const batchSize = strategyConfig.number || 5;\n      consoleDotLog(`Batch operation count: ${this.operationQueueCount}/${batchSize}`);\n\n      if (this.operationQueueCount >= batchSize) {\n        this.operationQueueCount = 0;\n        await this.vfs.versioner(`Batch commit after ${batchSize} operations`);\n      }\n    }\n  }\n\n  async getConfig() {\n    return this.config;\n  }\n}\n","import { config } from './../../configES6.js';\nimport { Logger } from './../LoggerES6.js';\n\nconst logger = new Logger(config.logging.kfs);\n\nfunction consoleDotLog(...params) {\n  logger.consoleDotLog('[Merging]', ...params);\n}\n\nfunction consoleDotError(...params) {\n  logger.consoleDotError('[Merging]', ...params);\n}\n\nexport class MergingManager {\n    constructor(vfs) {\n      this.vfs = vfs;\n      this.clockIntervalID = null;\n      this.config = this._getDefaultMergingConfig();\n    }\n  \n    _getDefaultMergingConfig() {\n      return {\n        strategy: config.merging?.strategy || null,\n        interval: config.merging?.interval || 10,\n        number: config.merging?.number || 5\n      };\n    }\n  \n    async setup(options = {}) {\n        this.config = {\n          ...this._getDefaultMergingConfig(),\n          ...(options.merging || {})\n        };\n      \n        if (this.config.strategy === 'clock') {\n          await this._startClockMerging(); // Now async\n        } else {\n          this.clearClock();\n        }\n      }\n      \n      async _startClockMerging() {\n        this.clearClock();\n        const intervalMs = this.config.interval * 1000;\n        this.clockIntervalID = setInterval(async () => {\n          try {\n            await this.vfs.merger.merge('Clock-based auto merge');\n          } catch (error) {\n            console.error('Clock-based merge failed:', error);\n          }\n        }, intervalMs);\n      }\n\n    clearClock() {\n      if (this.clockIntervalID) {\n        clearInterval(this.clockIntervalID);\n        this.clockIntervalID = null;\n      }\n    }\n\n    async getConfig() {\n        return this.config;\n      }\n  }","import { VFS } from \"./vfs.js\";\nimport { Logger } from \"./libs/LoggerES6.js\";\nimport { config } from './configES6.js';\nimport { VersioningManager } from './libs/kfsUtils/versioningManager.js';\nimport { MergingManager } from './libs/kfsUtils/mergingManager.js';\n\nconst logger = new Logger(config.logging.kfs);\n\nfunction consoleDotLog(...params) {\n  logger.consoleDotLog('[KFS]', ...params);\n}\n\nfunction consoleDotError(...params) {\n  logger.consoleDotError('[KFS]', ...params);\n}\n\nexport class KFS {\n  constructor() {\n    this.vfs = new VFS();\n    this.fsInstance = null;\n    this.versioningManager = new VersioningManager(this.vfs);\n    this.mergingManager = new MergingManager(this.vfs);    \n    this.commitCount = 0;\n  }\n  \n  // -------------------------------\n  // Versioning Configuration\n  // -------------------------------\n  \n  _setupVersioningAndMerging(options) {\n    this.versioningManager.setup(options);\n    this.mergingManager.setup(options);\n  }\n  \n  _clearClocks() {\n    this.versioningManager.clearClock();\n    this.mergingManager.clearClock();\n  }\n  \n  async _handleCommit(message) {\n    const versioningConfig = await this.versioningManager.getConfig();\n    const mergingConfig = await this.mergingManager.getConfig();\n    \n    await this.vfs.versioner(message);\n    this.commitCount++;\n    \n    if (mergingConfig.strategy === 'immediate') {\n      await this.vfs.merger();\n    }\n  }\n  \n  // -------------------------------\n  // Filesystem Operations\n  // -------------------------------\n\n  async mount(path, fsType, fsName, fetchMethod, options = {}) {\n    try {\n      this._setupVersioningAndMerging(options);\n      \n      path = this._normalizePath(path);\n      const versioningConfig = await this.versioningManager.getConfig();\n      const mergingConfig = await this.mergingManager.getConfig();\n      \n      const mountData = await this.vfs.mount(path, fsType, fsName, fetchMethod, {\n        ...options,\n        versioning: versioningConfig,\n        merging: mergingConfig\n      });\n\n      this.fsInstance = mountData.fsInstance;\n      const root = await this.read(`${path}/${fsName}`);\n      consoleDotLog('Mount successful, root:', root);\n      return mountData;\n    } catch (error) {\n      consoleDotError(`Failed to mount filesystem at ${path}:`, error);\n      throw new Error(`Failed to mount filesystem: ${error.message}`);\n    }\n  }\n\n  async unmount(path, fsName) {\n    try {\n      path = this._normalizePath(path);\n      await this.vfs.unmount(path, fsName);\n      this.fsInstance = null;\n      this._clearClocks();\n      this.commitCount = 0;\n      return { success: true };\n    } catch (error) {\n      consoleDotError(`Failed to unmount filesystem at ${path}:`, error);\n      throw new Error(`Failed to unmount filesystem: ${error.message}`);\n    }\n  }\n\n\n  async setMergingStrategy(mergingStrategy) {\n    await this.vfs.setMergingStrategy(mergingStrategy);\n    consoleDotLog('Merging strategy set to:', mergingStrategy);\n  }\n\n  async setVersioingStrategy(versioningStrategy) {\n    await this.vfs.setVersioingStrategy(versioningStrategy);\n    consoleDotLog('Versioning strategy set to:', versioningStrategy);\n  }\n\n  /**\n   * Sets user configurations for the KFS instance.\n    * @param {string} [args.name] - The name of the user.\n    * @param {string} [args.email] - The email of the user.\n    * @param {string} [args.username] - The username of the user.\n    * @param {string} [args.password] - The password of the user.\n    * @throws {Error} - Throws an error if the arguments are invalid or if the operation fails.\n   */\n  async setUserConfigs(args) {\n    if (!args || typeof args !== 'object') {\n      throw new Error('Invalid arguments: must be an object');\n    }\n    const allowedFields = ['password', 'username', 'email', 'name'];\n    const invalidFields = Object.keys(args).filter(\n      field => !allowedFields.includes(field)\n    );\n  \n    if (invalidFields.length > 0) {\n      throw new Error(\n        `Invalid field(s) provided: ${invalidFields.join(', ')}. ` +\n        `Allowed fields are: ${allowedFields.join(', ')}`\n      );\n    }\n    \n    this.vfs.setUserConfigs(args);\n    return args;\n  }\n\n  async create(path, type = 'file', content = '') {\n    try {\n      if (!['file', 'dir'].includes(type)) {\n        throw new Error(`Invalid type: ${type}. Must be 'file' or 'dir'`);\n      }\n\n      path = this._normalizePath(path);\n      const { fs, relativePath, versioning } = await this.vfs.resolveFS(path);\n  \n      if (type === 'file') {\n          await this._ensurePathExists(fs, relativePath);\n      }\n\n      if (type === 'dir') {\n        await fs.fsInstance.fs_mkdir(relativePath);\n      } else {\n        const fd = await fs.fsInstance.fs_fopen(relativePath, 'w');\n        await fs.fsInstance.fs_fwrite(fd, content);\n        await fs.fsInstance.fs_fclose(fd);\n      }\n\n      await this.vfs.writeToFsTable(relativePath, type, content.length);\n\n      if (versioning?.strategy === 'immediate') {\n        await this._handleCommit(`Created ${type} at ${path}`);\n      } else {\n        await this.versioningManager.maybeTriggerVersioning(versioning);\n      }\n\n      return { success: true };\n    } catch (error) {\n      consoleDotError(`Failed to create ${type} at ${path}:`, error);\n      throw new Error(`Failed to create: ${error.message}`);\n    }\n  }\n\n  async remove(path) {\n    try {\n      path = this._normalizePath(path);\n      const { fs, relativePath, versioning } = await this.vfs.resolveFS(path);\n\n      const stats = await fs.fsInstance.fs_stat(relativePath);\n      if (!stats) throw new Error('ENOENT: no such file or directory');\n\n      if (await stats.isDirectory()) {\n        await fs.fsInstance.fs_rmdir(relativePath);\n      } else {\n        await fs.fsInstance.fs_remove(relativePath);\n      }\n\n      await this.vfs.removeFromFsTable(relativePath);\n\n      if (versioning?.strategy === 'immediate') {\n        await this._handleCommit(`Removed ${path}`);\n      } else {\n        await this.versioningManager.maybeTriggerVersioning(versioning);\n      }\n\n      return { success: true };\n    } catch (error) {\n      consoleDotError(`Failed to remove ${path}:`, error);\n      throw new Error(`Failed to remove: ${error.message}`);\n    }\n  }\n\n  async read(path) {\n    try {\n      path = this._normalizePath(path);\n      const { fs, relativePath } = await this.vfs.resolveFS(path);\n      this.fsInstance = fs.fsInstance;\n\n      const stats = await this.fsInstance.fs_stat(relativePath);\n      if (!stats) throw new Error('ENOENT: no such file or directory');\n\n      if (await stats.isDirectory()) {\n        return await this.fsInstance.fs_readdir(relativePath);\n      } else {\n        const fd = await this.fsInstance.fs_fopen(relativePath, 'r');\n        const data = await this.fsInstance.fs_fread(fd, 1024);\n        await this.fsInstance.fs_fclose(fd);\n        return data;\n      }\n    } catch (error) {\n      throw new Error(`Failed to read file: ${error.message}`);\n    }\n  }\n\n  // -------------------------------\n  // Utility Methods\n  // -------------------------------\n  async _ensurePathExists(fs, path) {\n    const parts = path.split('/').filter(p => p !== '');\n    \n    const dirParts = parts.slice(0, -1);\n    let currentPath = '';\n    \n    for (const part of dirParts) {\n        currentPath = currentPath ? `${currentPath}/${part}` : `/${part}`;\n        try {\n            await fs.fsInstance.fs_mkdir(currentPath);\n            await this.vfs.writeToFsTable(currentPath, 'dir');\n        } catch (error) {\n            if (!error.message.includes('exists')) throw error;\n        }\n    }\n  }\n\n  _normalizePath(path) {\n    if (typeof path !== 'string') throw new Error('Path must be a string');\n    return path.startsWith('/') ? path : `/${path}`;\n  }\n}\n\nexport { serviceWorker } from './libs/sw-register.js';"],"names":["e","t","n","o","s","i","r","c","MagicPortal","logger","Logger","config","consoleDotLog","parameters","consoleDotError","WorkerPool","workerClass","mountPath","useSW","worker","GitWorker","portal","thread","_","reject","swSupport","entry","error","path","workerPool","MemoryFS","fsName","options","filename","mode","fd","length","file","data","chunk","content","currentData","offset","whence","stats","isDirectory","oldPath","newPath","dirEntries","eof","IDBFs","GitAuth","workerThread","username","password","name","email","VFSutils","fsType","fsInstance","fetchInfo","url","dir","fileId","fileList","root","pathParts","p","current","part","index","isLast","action","type","size","normalizedPath","parentInode","isDir","fsTable","message","syncStatus","err","strategy","_url","ref","localHead","getRemoteHead","remoteHead","mergeBase","base","localHasRemote","newFetchInfo","StorageUtils","dbName","key","resolve","request","getRequest","event","transaction","storedData","checkIndexedDBSupport","deleteRequest","VFS","storageName","versioning","merging","storedMount","mountData","dataToStore","errorMsg","fsPath","fetchMethod","fsSize","relativePath","updateResult","commitResult","mergeResult","mergingStrategy","versioningStrategy","args","params","VersioningManager","vfs","defaultConfig","intervalMs","overrideConfig","strategyConfig","batchSize","MergingManager","KFS","mergingConfig","versioningConfig","allowedFields","invalidFields","field","fs","dirParts","currentPath"],"mappings":"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"}