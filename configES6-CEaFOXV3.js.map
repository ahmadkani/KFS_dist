{"version":3,"file":"configES6-CEaFOXV3.js","sources":["/Users/ahmad/Documents/Development/kfs_build/kfs-vite/src/libs/LoggerES6.js","/Users/ahmad/Documents/Development/kfs_build/kfs-vite/src/configES6.js"],"sourcesContent":["export class Logger {\n  constructor(on = true, trace = false) {\n    this.on = on;\n    this.trace = trace;\n    }\n\n    consoleDotLog(...parameters) {\n    if (!this.on) return;\n    console.log(...parameters);\n    this.trace && console.trace();\n    }\n\n    consoleDotError(...parameters) {\n    if (!this.on) return;\n    console.error(...parameters);\n    this.trace && console.trace();\n    }\n}\n","// configES6.js\nlet config = null;\n\n// Define group mappings\nconst loggingGroups = {\n  serviceWorker: [\n    'serviceWorker',\n    'ServiceWorkerRegistration',\n    'swUtils',\n  ],\n  kfs: [\n    'kfs',\n    'fsType',\n    'fsManagerES6',\n    'fsManagerGlobal',\n    'vfs',\n    'VFSutils',\n  ],\n  gitWorker: [\n    'gitWorker',\n    'dotGit',\n    'acl',\n    'stats',\n    'GitAuth',\n    'WorkerPool',\n    'gitNoteManager'\n  ],\n  storage: [\n    'memoryFS',\n    'memoryBackendES6',\n    'memoryBackendGlobal',\n    'IDBFs'\n  ]\n};\n\n// Default configuration (fallback)\nconst defaultConfig = {\n  corsProxy: 'http://localhost:9000/',\n  dir: '/',\n  logging: {\n    vfs: true,\n    kfs: true,\n    IDBFs: true,\n    gitWorker: true,\n    acl: true,\n    stats: true,\n    fsType: true,\n    fsManagerES6: false,\n    fsManagerGlobal: false,\n    swUtils: true,\n    memoryFS: true,\n    memoryBackendES6: false,\n    memoryBackendGlobal: false,\n    VFSutils: true,\n    gitNoteManager: true,\n    ServiceWorkerRegistration: true,\n    serviceWorker: true,\n    storageUtils: true,\n    supportChecker: true,\n    dotGit: true,\n    GitAuth: true,\n    WorkerPool: true,\n  },\n  versioning: {\n    strategy: 'immediate',\n    interval: 10,\n    number: 5\n  },\n  merging: {\n    strategy: 'immediate',\n    interval: 60,\n    onConflictStrategy: 'remote'\n  }\n};\n\n// Promise that resolves when config is loaded\nlet configReadyPromise = null;\n\nasync function loadConfig() {\n  try {\n    // Use fetch to load config from public directory\n    const response = await fetch('/config.json');\n    if (!response.ok) {\n      throw new Error('Config file not found');\n    }\n    const jsonConfig = await response.json();\n    \n    // Apply group mappings to the loaded config\n    if (jsonConfig.logging) {\n      for (const group in loggingGroups) {\n        if (jsonConfig.logging.hasOwnProperty(group)) {\n          const value = jsonConfig.logging[group];\n          loggingGroups[group].forEach(subKey => {\n            if (jsonConfig.logging.hasOwnProperty(subKey)) {\n              jsonConfig.logging[subKey] = value;\n            }\n          });\n        }\n      }\n    }\n    \n    // Merge with default config\n    return {\n      ...defaultConfig,\n      ...jsonConfig,\n      logging: {\n        ...defaultConfig.logging,\n        ...(jsonConfig.logging || {})\n      },\n      versioning: {\n        ...defaultConfig.versioning,\n        ...(jsonConfig.versioning || {})\n      },\n      merging: {\n        ...defaultConfig.merging,\n        ...(jsonConfig.merging || {})\n      }\n    };\n  } catch (error) {\n    console.warn('Using default configuration:', error.message);\n    return defaultConfig;\n  }\n}\n\n// Initialize config\nconfigReadyPromise = loadConfig().then(loadedConfig => {\n  config = loadedConfig;\n  return config;\n}).catch(error => {\n  console.error('Failed to load config:', error);\n  config = defaultConfig;\n  return config;\n});\n\nasync function setConfig(newConfig) {\n  await configReadyPromise; // Wait for config to load first\n  \n  for (const key in newConfig) {\n    if (key === 'logging') {\n      const loggingConfig = newConfig.logging;\n      \n      // First process group settings\n      for (const group in loggingGroups) {\n        if (loggingConfig.hasOwnProperty(group)) {\n          const value = loggingConfig[group];\n          loggingGroups[group].forEach(subKey => {\n            if (config.logging.hasOwnProperty(subKey)) {\n              config.logging[subKey] = value;\n            }\n          });\n        }\n      }\n      \n      // Then process individual settings\n      for (const logKey in loggingConfig) {\n        if (config.logging.hasOwnProperty(logKey) && !loggingGroups.hasOwnProperty(logKey)) {\n          config.logging[logKey] = loggingConfig[logKey];\n        }\n      }\n    } else if (config.hasOwnProperty(key)) {\n      config[key] = newConfig[key];\n    } else {\n      throw new Error(`Invalid configuration key: ${key}`);\n    }\n  }\n}\n\nasync function getConfig() {\n  await configReadyPromise; // Wait for config to load\n  return config;\n}\n\n// Export the config object and ready promise\nexport { config, getConfig, setConfig, configReadyPromise };"],"names":["Logger","on","trace","parameters","config","loggingGroups","defaultConfig","configReadyPromise","loadConfig","response","jsonConfig","group","value","subKey","error","loadedConfig","getConfig"],"mappings":"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"}