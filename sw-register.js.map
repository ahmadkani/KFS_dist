{"version":3,"file":"sw-register.js","sources":["/Users/ahmad/Documents/Development/kfs_build/kfs-vite/src/libs/sw-register.js"],"sourcesContent":["import { Logger } from \"./LoggerES6.js\";\nimport { getConfig } from '../configES6.js';\n\nconst config = await getConfig();\nconst logger = new Logger(config.logging.ServiceWorkerRegistration);\n\nfunction consoleDotLog(...parameters) {\n  logger.consoleDotLog(...parameters);\n}\n\nfunction consoleDotError(...parameters) {\n  logger.consoleDotError(...parameters);\n}\n\nlet updateChannel;\n\nclass ServiceWorkerRegistration {\n  constructor() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.addEventListener('controllerchange', () => {\n        consoleDotLog('Service Worker controller changed.');\n        if (updateChannel) {\n          updateChannel.close();\n          updateChannel = null;\n        }\n        window.location.reload();\n      });\n    }\n  }\n\n  async register({ scope = '/', enableSync = false } = {}) {\n    if ('serviceWorker' in navigator) {\n      try {\n        const registration = await navigator.serviceWorker.getRegistration();\n        \n        if (registration) {\n          consoleDotLog('Service Worker already registered:', registration);\n          return registration;\n        }\n\n        // Use relative path from dist\n        const swPath = './service-worker.js';\n        const newRegistration = await navigator.serviceWorker.register(\n          swPath, \n          { scope, type: 'module' }\n        );\n\n        consoleDotLog('Service Worker registered with scope:', scope, newRegistration);\n\n        this._setupUpdateHandling(newRegistration);\n\n        if (enableSync && 'SyncManager' in window) {\n          this._setupBackgroundSync(newRegistration);\n        }\n\n        return newRegistration;\n      } catch (error) {\n        consoleDotError('Service Worker registration failed:', error);\n        throw error;\n      }\n    } else {\n      consoleDotLog('Service Worker not supported');\n      return undefined;\n    }\n  }\n\n  async unregister() {\n    if ('serviceWorker' in navigator) {\n      try {\n        const registration = await navigator.serviceWorker.getRegistration();\n        if (registration) {\n          await registration.unregister();\n          consoleDotLog('Service Worker unregistered.');\n        }\n      } catch (error) {\n        consoleDotError('Service Worker unregistration failed:', error);\n        throw error;\n      }\n    }\n  }\n\n  _setupUpdateHandling(registration) {\n    if (registration.waiting) {\n      this._updateReady(registration.waiting);\n    }\n\n    registration.onupdatefound = () => {\n      const newWorker = registration.installing;\n      newWorker.onstatechange = () => {\n        if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {\n          this._updateReady(newWorker);\n        }\n      };\n    };\n  }\n\n  _updateReady(worker) {\n    consoleDotLog('New update ready:', worker);\n\n    if (!updateChannel) {\n      updateChannel = new BroadcastChannel('sw-update-channel');\n    }\n\n    if (confirm(\"A new version is available. Would you like to update?\")) {\n      worker.postMessage({ action: 'skipWaiting' });\n\n      worker.addEventListener('statechange', () => {\n        if (worker.state === 'activated') {\n          setTimeout(() => {\n            if (updateChannel) updateChannel.close();\n            window.location.reload();\n          }, 0);\n        }\n      });\n    }\n  }\n\n  _setupBackgroundSync(registration) {\n    registration.sync\n      .register('my-sync')\n      .then(() => consoleDotLog('Sync registered'))\n      .catch(error => consoleDotError('Sync registration failed:', error));\n  }\n}\n\nexport const serviceWorker = new ServiceWorkerRegistration();"],"names":["config","getConfig","logger","Logger","consoleDotLog","parameters","consoleDotError","updateChannel","ServiceWorkerRegistration","scope","enableSync","registration","newRegistration","error","newWorker","worker","serviceWorker"],"mappings":";AAGA,MAAMA,IAAS,MAAMC,EAAW,GAC1BC,IAAS,IAAIC,EAAOH,EAAO,QAAQ,yBAAyB;AAElE,SAASI,KAAiBC,GAAY;AACpC,EAAAH,EAAO,cAAc,GAAGG,CAAU;AACpC;AAEA,SAASC,KAAmBD,GAAY;AACtC,EAAAH,EAAO,gBAAgB,GAAGG,CAAU;AACtC;AAEA,IAAIE;AAEJ,MAAMC,EAA0B;AAAA,EAC9B,cAAc;AACZ,IAAI,mBAAmB,aACrB,UAAU,cAAc,iBAAiB,oBAAoB,MAAM;AACjE,MAAAJ,EAAc,oCAAoC,GAC9CG,MACFA,EAAc,MAAO,GACrBA,IAAgB,OAElB,OAAO,SAAS,OAAQ;AAAA,IAChC,CAAO;AAAA,EAEP;AAAA,EAEE,MAAM,SAAS,EAAE,OAAAE,IAAQ,KAAK,YAAAC,IAAa,GAAO,IAAG,IAAI;AACvD,QAAI,mBAAmB;AACrB,UAAI;AACF,cAAMC,IAAe,MAAM,UAAU,cAAc,gBAAiB;AAEpE,YAAIA;AACF,iBAAAP,EAAc,sCAAsCO,CAAY,GACzDA;AAKT,cAAMC,IAAkB,MAAM,UAAU,cAAc;AAAA,UADvC;AAAA,UAGb,EAAE,OAAAH,GAAO,MAAM,SAAQ;AAAA,QACxB;AAED,eAAAL,EAAc,yCAAyCK,GAAOG,CAAe,GAE7E,KAAK,qBAAqBA,CAAe,GAErCF,KAAc,iBAAiB,UACjC,KAAK,qBAAqBE,CAAe,GAGpCA;AAAA,MACR,SAAQC,GAAO;AACd,cAAAP,EAAgB,uCAAuCO,CAAK,GACtDA;AAAA,MACd;AAAA,SACW;AACL,MAAAT,EAAc,8BAA8B;AAC5C;AAAA,IACN;AAAA,EACA;AAAA,EAEE,MAAM,aAAa;AACjB,QAAI,mBAAmB;AACrB,UAAI;AACF,cAAMO,IAAe,MAAM,UAAU,cAAc,gBAAiB;AACpE,QAAIA,MACF,MAAMA,EAAa,WAAY,GAC/BP,EAAc,8BAA8B;AAAA,MAE/C,SAAQS,GAAO;AACd,cAAAP,EAAgB,yCAAyCO,CAAK,GACxDA;AAAA,MACd;AAAA,EAEA;AAAA,EAEE,qBAAqBF,GAAc;AACjC,IAAIA,EAAa,WACf,KAAK,aAAaA,EAAa,OAAO,GAGxCA,EAAa,gBAAgB,MAAM;AACjC,YAAMG,IAAYH,EAAa;AAC/B,MAAAG,EAAU,gBAAgB,MAAM;AAC9B,QAAIA,EAAU,UAAU,eAAe,UAAU,cAAc,cAC7D,KAAK,aAAaA,CAAS;AAAA,MAE9B;AAAA,IACF;AAAA,EACL;AAAA,EAEE,aAAaC,GAAQ;AACnB,IAAAX,EAAc,qBAAqBW,CAAM,GAEpCR,MACHA,IAAgB,IAAI,iBAAiB,mBAAmB,IAGtD,QAAQ,uDAAuD,MACjEQ,EAAO,YAAY,EAAE,QAAQ,cAAa,CAAE,GAE5CA,EAAO,iBAAiB,eAAe,MAAM;AAC3C,MAAIA,EAAO,UAAU,eACnB,WAAW,MAAM;AACf,QAAIR,KAAeA,EAAc,MAAO,GACxC,OAAO,SAAS,OAAQ;AAAA,MACzB,GAAE,CAAC;AAAA,IAEd,CAAO;AAAA,EAEP;AAAA,EAEE,qBAAqBI,GAAc;AACjC,IAAAA,EAAa,KACV,SAAS,SAAS,EAClB,KAAK,MAAMP,EAAc,iBAAiB,CAAC,EAC3C,MAAM,CAAAS,MAASP,EAAgB,6BAA6BO,CAAK,CAAC;AAAA,EACzE;AACA;AAEY,MAACG,IAAgB,IAAIR,EAAyB;"}